Once you understand ownership, 
you won’t need to think about the stack and the heap very often, 
but knowing that the main purpose of ownership is to manage heap data can 
help explain why it works the way it does.



Note that a reference’s scope starts 
from where it is introduced and 
continues through the last time
 that reference is used. 
 For instance, this code will compile because the last usage of the immutable references, 
 the println!, occurs before the mutable reference is introduced:


    let mut s = String::from("hello");

    let r1 = &s; // no problem
    let r2 = &s; // no problem
    println!("{} and {}", r1, r2);
    // variables r1 and r2 will not be used after this point

    let r3 = &mut s; // no problem
    println!("{}", r3);


****
but the below codes has problem


let mut s = String::from("hello");

    let r1 = &s; // no problem
    let r2 = &s; // no problem
    let r3 = &mut s; // BIG PROBLEM

    println!("{}, {}, and {}", r1, r2, r3);


AND

let mut s = String::from("hello");

    let r1 = &mut s;
    let r2 = &mut s;

    println!("{}, {}", r1, r2);